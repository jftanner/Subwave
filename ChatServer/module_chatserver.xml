<?xml version="1.0" encoding="UTF-8"?>
<project name="module_chatserver" default="compile.module.chatserver">
    <dirname property="module.chatserver.basedir" file="${ant.file.module_chatserver}"/>


    <property name="compiler.args.chatserver" value="-encoding UTF-8 -source 1.6 ${compiler.args}"/>

    <property name="chatserver.output.dir" value="${module.chatserver.basedir}/../out/production/ChatServer"/>
    <property name="chatserver.testoutput.dir" value="${module.chatserver.basedir}/../out/test/ChatServer"/>

    <property name="chatserver.deployment.dir" value="${module.chatserver.basedir}/../deployment/"/>
    <property name="chatserver.deployment.file" value="${chatserver.deployment.dir}/SubwaveServer.jar"/>
    <property name="chatserver.main-class" value="com.tanndev.subwave.server.core.SubwaveServer"/>

    <path id="chatserver.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>

    <path id="chatserver.module.production.classpath">
        <pathelement location="${common.output.dir}"/>
    </path>

    <path id="chatserver.runtime.production.module.classpath">
        <path refid="common.runtime.production.module.classpath"/>
        <pathelement location="${chatserver.output.dir}"/>
    </path>

    <path id="chatserver.module.classpath">
        <pathelement location="${common.testoutput.dir}"/>
        <pathelement location="${common.output.dir}"/>
        <pathelement location="${chatserver.output.dir}"/>
        <pathelement location="${idea.home}/lib/hamcrest-core-1.3.jar"/>
        <pathelement location="${idea.home}/lib/hamcrest-library-1.3.jar"/>
        <pathelement location="${idea.home}/lib/junit-4.11.jar"/>
    </path>

    <path id="chatserver.runtime.module.classpath">
        <path refid="common.runtime.module.classpath"/>
        <pathelement location="${chatserver.testoutput.dir}"/>
        <pathelement location="${chatserver.output.dir}"/>
        <pathelement location="${idea.home}/lib/hamcrest-core-1.3.jar"/>
        <pathelement location="${idea.home}/lib/hamcrest-library-1.3.jar"/>
        <pathelement location="${idea.home}/lib/junit-4.11.jar"/>
    </path>


    <patternset id="excluded.from.module.chatserver">
        <patternset refid="ignored.files"/>
    </patternset>

    <patternset id="excluded.from.compilation.chatserver">
        <patternset refid="excluded.from.module.chatserver"/>
    </patternset>

    <path id="chatserver.module.sourcepath">
        <dirset dir="${module.chatserver.basedir}">
            <include name="src"/>
        </dirset>
    </path>


    <target name="compile.module.chatserver"
            depends="compile.module.chatserver.production,compile.module.chatserver.tests"
            description="Compile module ChatServer"/>

    <target name="compile.module.chatserver.production" depends="compile.module.common"
            description="Compile module ChatServer; production classes">
        <mkdir dir="${chatserver.output.dir}"/>
        <javac destdir="${chatserver.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}" fork="true">
            <compilerarg line="${compiler.args.chatserver}"/>
            <bootclasspath refid="chatserver.module.bootclasspath"/>
            <classpath refid="chatserver.module.production.classpath"/>
            <src refid="chatserver.module.sourcepath"/>
            <patternset refid="excluded.from.compilation.chatserver"/>
        </javac>

        <copy todir="${chatserver.output.dir}/com/tanndev/subwave/server">
            <fileset dir="${module.chatserver.basedir}/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.module.chatserver.tests" depends="compile.module.chatserver.production"
            description="compile module ChatServer; test classes" unless="skip.tests"/>

    <target name="clean.module.chatserver" description="cleanup module">
        <delete dir="${chatserver.output.dir}"/>
        <delete dir="${chatserver.testoutput.dir}"/>
        <delete file="${chatserver.deployment.file}"/>
    </target>

    <target name="deploy.module.chatserver" depends="compile.module.chatserver">
        <mkdir dir="${chatserver.deployment.dir}"/>
        <mkdir dir="${chatserver.output.dir}/lib"/>
        <copy todir="${chatserver.output.dir}/lib" flatten="true">
            <path refid="chatserver.module.production.classpath"/>
        </copy>

        <manifestclasspath property="chatserver.manifest.classpath" jarfile="${chatserver.deployment.file}">
            <classpath refid="chatserver.module.production.classpath"/>
        </manifestclasspath>

        <jar destfile="${chatserver.deployment.file}" basedir="${chatserver.output.dir}">
            <manifest>
                <attribute name="Main-Class" value="${chatserver.main-class}"/>
                <attribute name="Class-Path" value="${chatserver.manifest.classpath}"/>
            </manifest>
        </jar>
    </target>
</project>